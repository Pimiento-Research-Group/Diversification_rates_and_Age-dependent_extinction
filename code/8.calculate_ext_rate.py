"""
Project: Diversification Rates and ADE
Description:
Modelling of extinction rates as a function of age in pre-determined time bins based on the predicted Weibull distribution shape parameters
from data generated by script 7.
"""

import glob, os, argparse, sys
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.special import gamma
import pandas as pd
np.set_printoptions(suppress=True, precision=3)
import matplotlib.patheffects as pe
import itertools

def calc_scale(shape, longevity):
    scale = np.array(longevity/(gamma(1 + 1/shape)))
    return scale

def get_prob_ext(h, bins, b=0.1):
    d_inst = h[np.where((bins >= (b - bin_size)) & (bins <= b))[0][0]]
    conditional_d = d_inst / np.sum(h[bins[1:] > b])
    return conditional_d

def calc_ext_prob(i, data):
    shapes_0 = data[i, :, 18]
    shapes_1 = data[i, :, 3]
    shapes_2_1 = data[i, :, 9]
    shapes_2_2 =  data[i, :, 12]
    longevities_0 = data[i, :, 2]
    longevities_1 = data[i, :, 6]
    longevities_2 = data[i, :, 15]
    scales_0 = calc_scale(shapes_0, longevities_0)
    scales_1 = calc_scale(shapes_1, longevities_1)
    scales_2_1 = calc_scale(shapes_2_1, longevities_2)
    scales_2_2 = calc_scale(shapes_2_2, longevities_2)
    clas = data[i, 0, 1]


    if clas == 2:
        shapes_x = np.array([shapes_2_1, shapes_2_2])
        scales_x = np.array([scales_2_1, scales_2_2])
        d = np.random.weibull(shapes_x.flatten(), (n_samples, len(shapes_x.flatten()))) * scales_x.flatten()

        # remove extreme outliers (if any)
        d = d.flatten()
        d = d[d < 100]
    elif clas == 1:
        shapes_x = shapes_1
        d = np.random.weibull(shapes_x, (n_samples, len(shapes_x))) * scales_1
        # remove extreme outliers (if any)
        d = d.flatten()
        d = d[d < 100]
    elif clas == 0:
        shapes_x = shapes_0
        d = np.random.weibull(shapes_x, (n_samples, len(shapes_x))) * scales_0
        # remove extreme outliers (if any)
        d = d.flatten()
        d = d[d < 100]

    bin_size = 0.1
    bins = np.linspace(0, 100, int(100 / bin_size))
    h = np.histogram(d, bins=bins, density=True)[0]

    subset_bins = bins[bins < 93] #max longevity in our data is 93.something
    rates = np.array([get_prob_ext(h, bins, b) for b in subset_bins])
    rates = rates / bin_size
    # rates_list.append(rates)
    # rates_arr= np.array(rates_list)
    return rates, subset_bins

def calc_rates_list(i, data):
    rates_list = []
    for j in range(100):
        x, subset_bins = calc_ext_prob(i, data)
        rates_list.append(x)
    rates_arr = np.array(rates_list)
    # rates_log = np.log(rates_arr)
    return rates_arr, subset_bins

# Calculate extinction rates

f = "/path_to_adenn_output_file/" # "/Volumes/External_memory/Dropbox/Kristina_PhD_K_version/Kristina_files/Analyses/PyRate/PyRate_Analysis/outputs/2025/August/ADE-NN/"

n_samples = 10000
bin_size = 0.1

data = np.load(f + "species_ADENN.npy")
# data[7, :, 1] = 0
rates = np.zeros((data.shape[0], 100, 930))
j = 0
for i in reversed(range(data.shape[0])):
     x, subset_bins = calc_rates_list(i, data)
     rates[j] = x
     j += 1

f1 = os.path.join(f + "rates.npy")
np.save(file=f1, arr=rates)
f2 = os.path.join(f + "subset_bins.npy")
np.save(file=f2, arr=subset_bins)

